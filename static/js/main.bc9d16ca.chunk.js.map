{"version":3,"sources":["components/Timer.js","App.js","reportWebVitals.js","index.js"],"names":["timerID","formatTime","count","min","Math","floor","sec","Timer","time","step","onTick","autostart","React","useState","setCount","paused","setPaused","tik","prev","useEffect","setInterval","clearInterval","onClick","App","console","log","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oIAEIA,E,qDAEEC,EAAa,SAACC,GACnB,IAAIC,EAAMC,KAAKC,MAAOH,EAAQ,IAAO,IAAO,GACxCC,EAAM,KACTA,EAAM,IAAMA,GAGb,IAAIG,EAAMF,KAAKC,MAAOH,EAAQ,IAAQ,IAKtC,OAJII,EAAM,KACTA,EAAM,IAAMA,GAGNH,EAAM,IAAMG,GAuCLC,EApCD,SAAC,GAAuC,IAArCC,EAAoC,EAApCA,KAAMC,EAA8B,EAA9BA,KAAMC,EAAwB,EAAxBA,OAAQC,EAAgB,EAAhBA,UACpC,EAA0BC,IAAMC,SAASL,GAAzC,mBAAON,EAAP,KAAcY,EAAd,KACA,EAA4BF,IAAMC,UAAUF,GAA5C,mBAAOI,EAAP,KAAeC,EAAf,KAEMC,EAAM,WACXH,GAAS,SAACI,GAAD,OAAUA,EAAOT,MAG3BG,IAAMO,WAAU,WACf,GAAIJ,EAMH,OALAf,EAAUoB,YAAYH,EAAKR,GAC3BC,EAAOR,GACO,IAAVA,GACHc,GAAWD,GAEL,WACNM,cAAcrB,MAGd,CAACE,EAAOa,IASX,OACC,gCACC,8BAAMd,EAAWC,KACjB,wBAAQoB,QAVW,WACN,IAAVpB,GACHY,EAASN,GAEVQ,GAAWD,IAMV,SAAiCA,EAAmB,QAAV,cCjC9BQ,EAbH,WACV,OACE,8BACE,cAAC,EAAD,CACEf,KAAM,IACNC,KAAM,IACNC,OAAQ,SAACF,GAAD,OAAUgB,QAAQC,IAAI,0FAAsBjB,IACpDG,WAAW,OCEJe,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.bc9d16ca.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nlet timerID;\r\n\r\nconst formatTime = (count) => {\r\n\tlet min = Math.floor((count / 1000 / 60) << 0);\r\n\tif (min < 10) {\r\n\t\tmin = \"0\" + min;\r\n\t}\r\n\r\n\tlet sec = Math.floor((count / 1000) % 60);\r\n\tif (sec < 10) {\r\n\t\tsec = \"0\" + sec;\r\n\t}\r\n\r\n\treturn min + \":\" + sec;\r\n};\r\n\r\nconst Timer = ({ time, step, onTick, autostart }) => {\r\n\tconst [count, setCount] = React.useState(time);\r\n\tconst [paused, setPaused] = React.useState(!autostart);\r\n\r\n\tconst tik = () => {\r\n\t\tsetCount((prev) => prev - step);\r\n\t};\r\n\r\n\tReact.useEffect(() => {\r\n\t\tif (paused) {\r\n\t\t\ttimerID = setInterval(tik, step);\r\n\t\t\tonTick(count);\r\n\t\t\tif (count === 0) {\r\n\t\t\t\tsetPaused(!paused);\r\n\t\t\t}\r\n\t\t\treturn () => {\r\n\t\t\t\tclearInterval(timerID);\r\n\t\t\t};\r\n\t\t}\r\n\t}, [count, paused]);\r\n\r\n\tconst clickHandler = () => {\r\n\t\tif (count === 0) {\r\n\t\t\tsetCount(time);\r\n\t\t}\r\n\t\tsetPaused(!paused);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<div>{formatTime(count)}</div>\r\n\t\t\t<button onClick={clickHandler}>{!paused ? \"Start\" : \"Pause\"}</button>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Timer;","import React from \"react\";\nimport Timer from \"./components/Timer\";\n\nconst App = () => {\n  return (\n    <div>\n      <Timer\n        time={10000}\n        step={1000}\n        onTick={(time) => console.log(\"Залишилось часу: \" + time)}\n        autostart={true}\n      />\n    </div>\n  );\n};\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}